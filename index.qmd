---
title: "Teaching by Making Mistakes"
author: "Raniere Gaia Costa da Silva"
date: 2025-09-02
format: revealjs
bibliography: references.bib
---

## Agenda

| Start time | Activity |
| --- | --- |
| 10:00 | Introduction |
| 10:15 | Example 1 |
| 10:30 | Break |
| 10:40 | Example 2 & 3 |
| 10:55 | Build your own example |
| 11:15 | Break |
| 11:30 | Share your own example |
| 11:45 | Lunch |

## Introduction

Knowledge is acquired in many forms [@how-learning-works]. We have evidence that some forms are more efficient than others, for example, hands-on exercise is more efficient than watch a video.

Learning involves organise **new** knowledge [@how-learning-works].
One way for us to "visualise" how knowledge is organise is using a mind map.

## Apple and Cherry

:::: {.columns}

::: {.column width="50%"}
[![](./img/apple.jpg)](https://www.pexels.com/photo/red-and-orange-apple-fruit-102104/)


Photo by [mali maeder](https://www.pexels.com/@mali/) from Pexels.
:::

::: {.column width="50%"}
[![](./img/cherry.jpg)](https://www.pexels.com/photo/red-cherry-fruit-109274/)

Photo by [Lisa](https://www.pexels.com/@fotios-photos/) from Pexels.
:::

::::

## Mind Map (1)

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Apple))
    red
```
:::

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Cherry))
    red
```
:::

::::

## Mind Map (2)

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Apple))
    red
    sweet
```
:::

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Cherry))
    red
    sweet
```
:::

::::

## Mind Map (3)

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Apple))
    red
    sweet
    fruit
```
:::

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Cherry))
    red
    sweet
    fruit
```
:::

::::


## Mind Map (4)

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Apple))
    red
    sweet
    fruit
    January to December
```
:::

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Cherry))
    red
    sweet
    fruit
    May to July
```
:::

::::

## Mind Map (5)

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Apple))
    red
    sweet
    fruit
    January to December
    cuttable
```
:::

::: {.column width="50%"}
```{mermaid}
mindmap
  root((Cherry))
    red
    sweet
    fruit
    May to July
    uncuttable
```
:::

::::

## Mistakes

Mistakes also contributes to someone's personal mind map / knowledge.

As a instructor, we can design the lesson to also include sections were the instructor makes mistakes **or** directs the learner to a mistake to expand the learner's knowledge.

**All** mistakes **must** be made in a safe and risk free environment!

## Example 1

This first example is based on Software Carpentry's "[Version Control with Git](https://swcarpentry.github.io/git-novice/)".

## Mistake 1.1

I like to teach `git init` before `git config` because `git` will show

```
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint:
hint:   git config --global init.defaultBranch <name>
hint:
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint:
hint:   git branch -m <name>
```

This allows me to help learners to read the output they get in the terminal.

## Mistake 1.2

I like to "forget" a closing single quote `'` the first time that I use `git commit` because I will end up with

```
$ git commit -m 'First commit
>
```

This allows me to remember students that `>` is a indicator that the shell is expecting a close token.

## Mistake 1.3

I like to make a typo the second time that I use `git commit` because it will allow me to mention `--amend` that is a question that learners always make.

## Break

10 minutes. We would return at 10:40.

## Example 2

This second example is based on Software Carpentry's "[The Unix Shell](https://swcarpentry.github.io/shell-novice/)".

## While-loop in Bash

When explaining the while-loop in Bash, the first example would be something like

```bash
for file in *; do echo $file; done
```

```
Australia.txt
Colombia.txt
Ireland.txt
Morocco.txt
Rwanda.txt
```

## Mistake 2

As a exercise, I would propose learners to remove the files in the directory knowing that

```bash
for file in *; do echo $file; done
```

```
Costa Rica.txt
New Zealand.txt
San Marino.txt
The Bahamas.txt
United Kingdom.txt
```

## Mistake 2 - Solution

Learners that replace `echo` with `rm` will encounter a error like

```
rm: can't remove 'Costa': No such file or directory
```

A tip for the learners is to use quotes.

Learners that try a single quote, `'`, will encounter the error

```
rm: can't remove '$file': No such file or directory
```

Learners that try a double quote, `"`, will find the solution to the exercise.

## Example 3

This third example is would fit more in a **advanced** Software Carpentry's "[The Unix Shell](https://swcarpentry.github.io/shell-novice/)".

## `xargs`

`xargs` is a programm found in the UNIX system used to pass the output of one program as arguments to another program. `xargs` can be used in some cases to replace a while-loop.

First, I have students running

```bash
cat steps.txt | xargs echo
```

and

```bash
cat steps.txt | xargs --delimiter=\n echo
```

in the machine.

## Mistake 3

As a exercise, users will have to re-run

```bash
cat steps.txt | xargs --delimiter=\n echo
```

in a third-party environment. The third-party environment is configured so that learners will find the error

```
xargs: unrecognized option: delimiter=n
```

## Build your own example

Working in pairs. Think of a mistake that you could introduce in a lesson that you taught or are planning to teach.

## Break

15 minutes. We would return at 11:30.

## Share your own example

We would like to hear what your examples are.

## Lunch

1 hour for lunch. We will return at 12:45.

## References

::: {#refs}
:::